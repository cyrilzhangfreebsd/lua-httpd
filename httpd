#!/usr/libexec/flua
-- vim: set et:
-- Minimal web server written in Lua
--
-- Use with inetd, no other dependencies:
-- http    stream  tcp     nowait  root    /usr/local/sbin/httpd      httpd

--
-- Copyright (c) 2016 - 2020 Ryan Moeller <ryan@freqlabs.com>
--
-- Permission to use, copy, modify, and distribute this software for any
-- purpose with or without fee is hereby granted, provided that the above
-- copyright notice and this permission notice appear in all copies.
--
-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
-- WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
-- MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
-- ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-- WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
-- ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
-- OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
--

package.path = "/usr/home/yang/src/lua-httpd/?.lua;" .. package.path

local httpd = require("httpd")
local template = require("template")

local boot = require("boot")
local disk = require("disk")
local distset = require("distset")
local filesystem = require("filesystem")
local hardening = require("hardening")
local keymap = require("keymap")
local partition = require("partition")
local service = require("service")
local shell = require("shell")

--local manifest = "/usr/local/share/freebsd/MANIFESTS/amd64-amd64-13.0-RELEASE"
local manifest = "/home/yang/Downloads/MANIFEST"

local http_file = assert(io.open("/home/yang/src/lua-httpd/installer.html", "r"))
local string = http_file:read("*all")

function pairs_by_keys(t, f)
    local a = {}
    for n in pairs(t) do table.insert(a, n) end
    table.sort(a, f)
    local i = 0 -- iterator variable
    local iter = function() -- iterator function
        i = i + 1
        if a[i] == nil then return nil
        else return a[i], t[a[i]]
        end
    end
    return iter
end

function selected(cond)
    return cond and "selected" or ""
end

--TODO: properly credit
function unescape (str)
   str = string.gsub (str, "+", " ")
   str = string.gsub (str, "%%(%x%x)", function(h) return string.char(tonumber(h,16)) end)
   return str
end

function splitString(str, char)
        local split_list = {}
        
        for match in str:gmatch("[^" .. char .. "]+") do
                table.insert(split_list, match)
        end
        return split_list
end

local server = httpd.create_server("/var/log/httpd.log")
server:add_route("GET", "^/(.*)$", function(request)
    local lang = request.matches[1]
    if lang == "" then
	lang = "en"
    end
    local keymap_index, keymap_menu = keymap.index(keymap.VT)
    local body = template.process(string,
    { theme = "cerulean", -- "darkly", -- NB: the Bulmaswatch themes are broken atm
      lang = lang,
      boothowto = boot.howto(),
      bootmethod = boot.method(),
      disks = disk.info(),
      distsets = distset.list(manifest),
      filesystem_formats = filesystem.formats,
      hardening_menu = hardening.menu,
      keymap_menu = keymap_menu,
      keymap_index = keymap_index,
      partition_styles = partition.styles,
      service_menu = service.menu,
      shells = shell.list,
    })
    return { status=200, reason="ok", body=body }
end)
server:add_route("POST", "^/install$", function(request)

    local the_file = io.tmpfile()

    for i, thing in ipairs(splitString(unescape(request.body), "&")) do
            print(i, thing)
    end
    return { status=501, reason="Not implemented", body="TODO" }
end)
server:run(true)
